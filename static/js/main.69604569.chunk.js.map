{"version":3,"sources":["Canvas.js","Galery.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","db","firebase","firestore","useState","isDrawing","setIsDrawing","tool","setTool","tool1","setTool1","tool2","setTool2","img","setImg","name","setName","name1","setName1","x","y","coordinates","canvasRef","useRef","contextRef","useEffect","canvas","current","width","height","style","backgroundColor","context","getContext","lineWidth","image","Image","src","onload","drawImage","prepareCanvas","imageFirebase","setImage","collection","onSnapshot","querySnapshot","docs","map","doc","id","url","data","naziv","className","border","borderRadius","color","onChangeComplete","hex","type","value","onChange","e","target","required","onClick","preventDefault","i","length","undefined","files","URL","createObjectURL","to","console","log","alert","add","toDataURL","then","docRef","catch","error","htmlFor","checked","mCanvas","document","createElement","clearRect","translate","radians","Math","PI","rotate","onMouseDown","nativeEvent","strokeStyle","offsetX","offsetY","beginPath","moveTo","onMouseUp","lineTo","stroke","rect","arc","sqrt","fillStyle","fill","closePath","onMouseMove","ref","fillRect","Galery","list","setList","textAlign","obj","margin","padding","display","alt","App","basename","path","element","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.69604569.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport {CompactPicker} from \"react-color\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport {Link} from \"react-router-dom\"; \n\nexport const Canvas = () => {\n  let db = firebase.firestore();\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [tool, setTool] = useState(\"handdrawn\");\n  const [tool1, setTool1] = useState(\"#000000\");\n  const [tool2, setTool2] = useState(\"empty\");\n  const [img, setImg] = useState();\n  const [name, setName] = useState(\"\");\n  const [name1, setName1] = useState(\"\");\n  const [[x, y], coordinates] = useState([0,0]);\n  const canvasRef = useRef();\n  const contextRef = useRef();\n\n  function changeColor(color){\n    setTool1(color.hex);\n  }\n  \n  const prepareCanvas = () => {\n    const canvas = canvasRef.current;\n    canvas.width = 500;\n    canvas.height = 500;\n    canvas.style.backgroundColor = \"lightblue\";\n    const context = canvas.getContext(\"2d\");\n    context.lineWidth = 3;\n    contextRef.current = context;\n    const image = new Image();\n    image.src = img\n    image.onload = () => {\n    context.drawImage(image, 0, 0, 500, 500);\n    };\n  };\n\n  const startDrawing = ({ nativeEvent }) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.strokeStyle = tool1;\n    const { offsetX, offsetY } = nativeEvent;\n    coordinates([offsetX, offsetY]);\n    contextRef.current.beginPath();\n    if(tool==\"line\"){\n    contextRef.current.moveTo(offsetX, offsetY);}\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    if(tool==\"line\"){\n    contextRef.current.moveTo(x, y);\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    }\n    if(tool==\"rectangle\"){\n    contextRef.current.rect(x, y, offsetX-x, offsetY-y);\n    }\n    if(tool==\"circle\"){\n    contextRef.current.arc(x, y, Math.sqrt((offsetX-x)*(offsetX-x)+(offsetY-y)*(offsetY-y)), 0, 2 * Math.PI);\n      }\n    if(tool2==\"full\"){\n    contextRef.current.fillStyle = tool1;\n    contextRef.current.fill();} else\n    contextRef.current.stroke();\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    console.log(offsetX, offsetY);\n    if(tool==\"handdrawn\"){\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();}\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"lightblue\";\n    context.fillRect(0, 0, 500, 500);\n  }\n\n  function rotate(e){\n    e.preventDefault();\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    var mCanvas=document.createElement('canvas');\n    mCanvas.width=canvas.width;\n    mCanvas.height=canvas.height;\n    var mctx=mCanvas.getContext('2d');\n  \n    mctx.drawImage(canvas,0,0);\n  \n    context.clearRect(0,0,canvas.width,canvas.height);\n\n    context.translate(250,250);\n  \n    var radians=90/180*Math.PI;\n    context.rotate(radians);\n  \n    context.drawImage(mCanvas,-canvas.width/2,-canvas.height/2);\n  \n    context.rotate(-radians);\n    context.translate(-canvas.width/2,-canvas.height/2);\n  \n  }\n\n  useEffect(() => {\n    prepareCanvas();\n  }, [img]);\n\nfunction addImage(e){\n  e.preventDefault();\n  const canvas = canvasRef.current;\n  for (let i = 0; i < imageFirebase.length; i++) {\n    console.log(imageFirebase[i].naziv, name);\n    if(imageFirebase[i].naziv==name){\n    setName(\"\");\n    alert(\"Ime je zauzeto\");\n    return 0;\n    }}\n  db.collection(\"images\").add({\n    url: canvas.toDataURL(\"image/png\"),\n    naziv: name\n      })\n        .then((docRef) => {\n        console.log(\"Document written with ID: \", docRef.id);\n      })\n    .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n    setName(\"\");\n    }\n    \nconst [imageFirebase, setImage] = useState();\nfunction getImage(e) {\n  e.preventDefault();\n  db.collection(\"images\").onSnapshot(function (querySnapshot) {\n    setImage(\n      querySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        url: doc.data().url,\n      }))\n    );\n  });\n  const canvas = canvasRef.current;\n  const context = canvas.getContext(\"2d\");\n  contextRef.current = context;\n  const image = new Image();\n  for (let i = 0; i < imageFirebase.length; i++) {\n    if(imageFirebase[i].naziv==name1){\n    image.src = imageFirebase[i].url;\n    setName1(\"\");\n    } \n  }\n  image.onload = () => {\n  context.drawImage(image, 0, 0, 500, 500);\n  }; \n}\nuseEffect(() => {\n  db.collection(\"images\").onSnapshot(function (querySnapshot) {\n    setImage(\n      querySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        url: doc.data().url,\n        naziv: doc.data().naziv\n      }))\n    );\n  });\n}, [])\n  return (\n    <div>\n      <br></br>\n      <div className=\"row align-items-end\" style={{ backgroundColor: 'lightblue', border: '2px solid black', borderRadius: 5 }}>\n  <div className=\"form-group col-12 col-md-6 col-sm-12 col-xs-12\">\n    <CompactPicker color={tool1} onChangeComplete={changeColor} />\n  </div>\n  <div className=\"form-group col-12 col-md-6 col-sm-12 col-xs-12\">\n    <form className=\"form-inline\">\n      <input type=\"text\" className=\"form-control\" style={{ width: \"30%\" }} value={name1} onChange={e => setName1(e.target.value)} required />\n      <button className=\"form-control\" style={{ width: \"30%\" }} onClick={getImage}>Get</button>\n    </form>\n    <input type=\"file\" style={{ color: \"transparent\" }} onChange={(e) => { if (e.target.files[0] != undefined) { setImg(URL.createObjectURL(e.target.files[0])) } }} />\n    <Link to=\"/galery\"><button className=\"form-control\" style={{ width: \"40%\" }}>Gallery</button></Link>\n  </div>\n  <div className=\"form-group col-12\">\n    <form className=\"form-inline\">\n      <input type=\"text\" className=\"form-control\" style={{ width: \"50%\" }} value={name} onChange={e => setName(e.target.value)} required />\n      <button className=\"form-control\" onClick={addImage} style={{ width: \"30%\" }}>Save</button>\n    </form>\n    <form className=\"form-inline\">\n      <label className=\"form-control\">Selection:</label>\n      <label className=\"form-control\" htmlFor=\"selection\">Hand drawn</label>\n      <input className=\"form-control\" type=\"radio\" id=\"selection1\" checked={tool === \"handdrawn\"} onChange={() => setTool(\"handdrawn\")} />\n      <label className=\"form-control\" htmlFor=\"selection\">Line</label>\n      <input className=\"form-control\" type=\"radio\" id=\"selection2\" checked={tool === \"line\"} onChange={() => setTool(\"line\")} />\n      <label className=\"form-control\" htmlFor=\"selection\">Rectangle</label>\n      <input className=\"form-control\" type=\"radio\" id=\"selection3\" checked={tool === \"rectangle\"} onChange={() => setTool(\"rectangle\")} />\n      <label className=\"form-control\" htmlFor=\"selection\">Circle</label><br /><br />\n      <input className=\"form-control\" type=\"radio\" id=\"selection4\" checked={tool === \"circle\"} onChange={() => setTool(\"circle\")} />\n    </form>\n    <form className=\"form-inline\">\n      <label className=\"form-control\">Style:</label>\n      <label className=\"form-control\" htmlFor=\"style\">Full</label>\n      <input className=\"form-control\" type=\"radio\" id=\"style1\" checked={tool2 === \"full\"} onChange={() => setTool2(\"full\")} />\n      <label className=\"form-control\" htmlFor=\"style\">Empty</label>\n      <input className=\"form-control\" type=\"radio\" id=\"style2\" checked={tool2 === \"empty\"} onChange={() => setTool2(\"empty\")} />\n      <button className=\"form-control\" onClick={rotate} style={{ width: \"30%\" }}>Rotate</button>\n    </form>\n  </div>\n</div>\n \n    <br></br>\n    <canvas\n      onMouseDown={startDrawing}\n      onMouseUp={finishDrawing}\n      onMouseMove={draw}\n      ref={canvasRef}\n    />\n    <button className=\"form-control\" onClick={clearCanvas} style={{width: \"10%\"}}>Clear</button>\n    </div>\n    \n  );\n};\n\nexport default Canvas\n","import React, { useEffect, useState } from 'react'\r\nimport firebase from \"firebase\";\r\n\r\nexport const Galery = () => {\r\n\r\n    let db = firebase.firestore();\r\n    const [list, setList] = useState([]);\r\n\r\n    useEffect(() => {\r\n    db.collection(\"images\").onSnapshot(function (querySnapshot) {\r\n        setList(\r\n        querySnapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            url: doc.data().url,\r\n            naziv: doc.data().naziv,\r\n        }))\r\n        );\r\n    }); \r\n    }, [])\r\n    \r\n    return (\r\n        <div >\r\n             <h1 style={{textAlign : \"center\"}}>GALERY</h1>\r\n             {list.map(obj  => \r\n                <div style= {{margin: 10, padding: 10, border: \"solid black 1px\", display: 'inline-block', borderRadius: \"30px\"}}>\r\n                <p>{obj.naziv}</p>\r\n                <img  src = {obj.url}\r\n                width=\"500\"\r\n                height=\"500\"\r\n                alt=\"\" />\r\n                </div>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\nexport default Galery","import React from 'react'\nimport { Canvas } from './Canvas'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {HashRouter, Routes, Route} from \"react-router-dom\";\nimport Galery from './Galery';\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <HashRouter basename=\"/drawing-app\">\n      <Routes>\n      <Route path=\"/\" element={<Canvas />} />\n      <Route path=\"/galery\" element={<Galery />} />\n      </Routes>\n      </HashRouter>\n    </div>\n  );\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBxAYVIJMzGSREaKbuxlTfzTEhLOYTS8Uc\",\n  authDomain: \"popravni-858bb.firebaseapp.com\",\n  projectId: \"popravni-858bb\",\n  storageBucket: \"popravni-858bb.appspot.com\",\n  messagingSenderId: \"301054610390\",\n  appId: \"1:301054610390:web:f706b41e8534961c597277\",\n  measurementId: \"G-971PKE7T8T\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}